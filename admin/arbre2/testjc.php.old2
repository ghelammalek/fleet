<?
require("../require/function.php");
require("../require/back_include.php");
require("../require/function_arbre2.php");
if($_GET["lang"]){
  $requete_langue = "select langue_id from ".__racinebd__."langue where shortlib = '".$_GET["lang"]."'";
  $link_langue=query($requete_langue);
  $nombre_langue = num_rows($link_langue);
  if($nombre_langue > 0){
    while ($ligne_langue=fetch($link_langue)){
      $_POST["langue_id"] = $ligne_langue["langue_id"];
    }
  } else {
      $_POST["langue_id"] = 1;
  }
} else {
    $_POST["langue_id"] = 1;
}
?>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<title>Phantom</title>
	<link href="src/skin-vista/ui.dynatree.css" rel="stylesheet" type="text/css">
  <link href="src/skin-vista/jquery.tooltip.css" rel="stylesheet" type="text/css">
  <link href="contextmenu/jquery.contextMenu2.css" rel="stylesheet" type="text/css" >
  
	<script src="jquery/jquery.js" type="text/javascript"></script>
	<script src="jquery/jquery-ui.custom.js" type="text/javascript"></script>
	<script src="jquery/jquery.cookie.js" type="text/javascript"></script>
  <script src="jquery/jquery.tooltip.js" type="text/javascript"></script>
  <script src="contextmenu/jquery.contextMenu.js" type="text/javascript"></script>
	<script src="src/jquery.dynatree.jc.js" type="text/javascript"></script>
  
  

<script type="text/javascript">
 // --- Implement Cut/Copy/Paste --------------------------------------------
  var clipboardNode = null;
  var pasteMode = null;

  function copyPaste(action, node) {
    switch( action ) {
    case "cut":
    case "copy":
      clipboardNode = node;
      pasteMode = action;
      break;
    case "paste":
      if( !clipboardNode ) {
        alert("Clipoard is empty.");
        break;
      }
      if( pasteMode == "cut" ) {
        // Cut mode: check for recursion and remove source
        var isRecursive = false;
        var cb = clipboardNode.toDict(true, function(dict){
          // If one of the source nodes is the target, we must not move
          if( dict.key == node.data.key )
            isRecursive = true;
        });
        if( isRecursive ) {
          alert("Cannot move a node to a sub node.");
          return;
        }
        node.addChild(cb);
        clipboardNode.remove();
      } else {
        // Copy mode: prevent duplicate keys:
        var cb = clipboardNode.toDict(true, function(dict){
          dict.title = "Copy of " + dict.title;
          delete dict.key; // Remove key, so a new one will be created
        });
        node.addChild(cb);
      }
      clipboardNode = pasteMode = null;
      break;
    default:
      alert("Unhandled clipboard action '" + action + "'");
    }
  };

  // --- Contextmenu helper --------------------------------------------------
  function bindContextMenu(span) {
    // Add context menu to this node:
    $(span).contextMenu({menu: "myMenu"}, function(action, el, pos) {
      // The event was bound to the <span> tag, but the node object
      // is stored in the parent <li> tag
      var node = $.ui.dynatree.getNode(el);
      switch( action ) {
      case "cut":
      case "copy":
      case "paste":
        copyPaste(action, node);
        break;
      default:
        alert("Todo: appply action '" + action + "' to node " + node);
      }
    });
  };




var struct = [
{
"key":"root1",
"title":"<?=$trad["Phantom"]?>",
"icon":"base.gif",
"unselectable":true,
"children":[

<?php
listnoeud2("null",$_POST["langue_id"]);
?>
]
},
{
"key":"pb",
"title":"<?=$trad["Poubelle"]?>",
"icon":"trash.gif",
"unselectable":true,
"children":[
<?php
listnoeud2('pb',$_POST["langue_id"]);
?>
]
}
];
	$(function(){
		$("#tree").dynatree( {
      //persist: true,
			title: "Phantom",
      imagePath:'<?=__reparbre__?>imgs/',
      defaultVerrouImg:'lock.gif',
			fx: { height: "toggle", duration: 200 },
			autoFocus: false,
			onActivate: function(node) {
				$("#echoActive").text("" + node + " (" + node.getKeyPath()+ ")");
			},
      onClick: function(node, event) {
        // Close menu on click
        if( $(".contextMenu:visible").length > 0 ){
          $(".contextMenu").hide();
//          return false;
        }
      },
      onKeydown: function(node, event) {
        // Eat keyboard events, when a menu is open
        if( $(".contextMenu:visible").length > 0 )
          return false;

        switch( event.which ) {

        // Open context menu on [Space] key (simulate right click)
        case 32: // [Space]
          $(node.span).trigger("mousedown", {
            preventDefault: true,
            button: 2
            })
          .trigger("mouseup", {
            preventDefault: true,
            pageX: node.span.offsetLeft,
            pageY: node.span.offsetTop,
            button: 2
            });
          return false;

        // Handle Ctrl-C, -X and -V
        case 67:
          if( event.ctrlKey ) { // Ctrl-C
            copyPaste("copy", node);
            return false;
          }
          break;
        case 86:
          if( event.ctrlKey ) { // Ctrl-V
            copyPaste("paste", node);
            return false;
          }
          break;
        case 88:
          if( event.ctrlKey ) { // Ctrl-X
            copyPaste("cut", node);
            return false;
          }
          break;
        }
      },
      /*Bind context menu for every node when it's DOM element is created.
        We do it here, so we can also bind to lazy nodes, which do not
        exist at load-time. (abeautifulsite.net menu control does not
        support event delegation)*/
      onCreate: function(node, span){
        bindContextMenu(span);
      },
      children:struct,
			onLazyRead: function(node){node.appendAjax({url: "/bailleul/dev2//admin/arbre2/sampleOpen1JC.php",data: {key: node.data.key,langue_id: <?=$_POST["langue_id"]?>}});},
      //gestion du drag and drop
      dnd: {
            onDragStart: function(node) {
              logMsg("tree.onDragStart(%o)", node);
              return true;
            },
            autoExpandMS: 1000,
            preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
            onDragEnter: function(node, sourceNode) {
              logMsg("tree.onDragEnter(%o, %o)", node, sourceNode);
              return true;
            },
            onDragOver: function(node, sourceNode, hitMode) {
              logMsg("tree.onDragOver(%o, %o, %o)", node, sourceNode, hitMode);
              if(node.isDescendantOf(sourceNode)){
                return false;
              }
              if( !node.data.isFolder && hitMode === "over" ){
                return "after";
              }
            },
            onDrop: function(node, sourceNode, hitMode, ui, draggable) {
              logMsg("tree.onDrop(%o, %o, %s)", node, sourceNode, hitMode);
              //alert(DTNodeStatus_Loading)
              node.setLazyNodeStatus(DTNodeStatus_Loading);
              $.ajax({
                url: '/bailleul/dev2/admin/arbre2/sampledrop.php',
                type: "POST",
                dataType: "json",
                data: {drop_id: node.data.key,drag_id: sourceNode.data.key},
                success: function(data) {
                  node.setLazyNodeStatus(DTNodeStatus_Ok);
                  if(data.ok){        
                    sourceNode.move(node, hitMode);
                  }else{
                    alert(data.msg)
                  }
                }
              }).error(function(jqXHR, textStatus, errorThrown){
              alert(jqXHR.responseText+"erreur");
              node.setLazyNodeStatus(DTNodeStatus_Error, {info: textStatus, tooltip: "" + errorThrown});}
              );
            },
            onDragLeave: function(node, sourceNode) {
              logMsg("tree.onDragLeave(%o, %o)", node, sourceNode);
            }
          }
		});
		});
</script>
</head>
<body class="example">
<h1>Phantom</h1>
<!-- Definition of context menu -->
	<ul id="myMenu" class="contextMenu">
		<li class="edit"><a href="#edit">Edit</a></li>
		<li class="cut separator"><a href="#cut">Cut</a></li>
		<li class="copy"><a href="#copy">Copy</a></li>
		<li class="paste"><a href="#paste">Paste</a></li>
		<li class="delete"><a href="#delete">Delete</a></li>
		<li class="quit separator"><a href="#quit">Quit</a></li>
	</ul>
<div id="tree"><!-- When using initAjax, it may be nice to put a throbber here, that spins until the initial content is loaded: -->
</div>
<div>Active node: <span id="echoActive">-</span></div>
</body>
</html>
